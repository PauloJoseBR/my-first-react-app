{"version":3,"sources":["serviceWorker.js","components/card.js","components/cardList.js","components/searchbox.js","components/scroll.js","components/errorBoundary.js","components/counterButton.js","components/header.js","containers/app.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","CardList","robots","console","log","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","PureComponent","Header","App","onRequestRobots","onSearchChange","filteredRobots","isPending","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c72836ab.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img alt=\"robots\" src={`https://robohash.org/${props.id}?200x200}`} />\r\n        <div>\r\n            <h2>{props.name}</h2>\r\n            <p>{props.email}</p>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../components/card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    console.log('CardList')\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />);\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ( {searchField, searchChange}) => {\r\n    console.log('SearchBox')\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='\r\n                search robots' \r\n                onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '900px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>Ooops.. That's not good! </h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { PureComponent } from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n\r\n    constructor() \r\n    {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState)\r\n    {\r\n        console.log(nextProps, nextState);\r\n        if(this.state.count !== nextState.count)\r\n        {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateCount = () =>\r\n    {\r\n        this.setState(state => {\r\n            return {count: this.state.count + 1}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('CounterButton')\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count} \r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './counterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        console.log('Header')\r\n        return(\r\n        <div>\r\n            <CounterButton color={'red'} /> \r\n            <h1 className='f1'>RoboFriends Das Galaxias!!!</h1>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/cardList';\r\nimport SearchBox from '../components/searchbox';\r\nimport Scroll from '../components/scroll';\r\nimport { render } from '@testing-library/react';\r\nimport './app.css';\r\nimport ErrorBoundary from '../components/errorBoundary';\r\nimport Header from '../components/header';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        return (\r\n            <div className=\"tc\">\r\n                <Header />\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n        \r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n","import { CHANGE_SEARCH_FIELD,\r\n         REQUEST_ROBOTS_PENDING,\r\n         REQUEST_ROBOTS_SUCCESS,\r\n         REQUEST_ROBOTS_FAILED } from './constants.js';\r\n\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false, \r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false})   \r\n        default:\r\n            return state; \r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './containers/app';\r\nimport { Provider, connect } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}